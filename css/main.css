/* RESET.CSS */
/* Box sizing rules */
*,
*::before,
*::after {
    box-sizing: border-box;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
    margin: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role='list'],
ol[role='list'] {
    list-style: none;
}

/* Set core root defaults */
html:focus-within {
    scroll-behavior: smooth;
}

/* Set core body defaults */
body {
    overflow: hidden;
    min-height: 100vh;
    text-rendering: optimizeSpeed;
    line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
    text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture {
    max-width: 100%;
    display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
    font: inherit;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
    html:focus-within {
        scroll-behavior: auto;
    }

    *,
    *::before,
    *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
    }
}

/* GLOBALS */
li {
    list-style-type: none;
}

body {
    font-family: 'Public Sans', sans-serif;
    color: var(--mainBlue);
    width: 100%;
    margin: 0 auto;
    background-color: lightgray;
}

ul {
    margin: 0;
    padding: 0;
}

a {
    text-decoration: none;
    color: var(--mainBlue);
}

/* STYLE.CSS */
/* @font-face {
    font-family: Generic;
    src: url("/CPD-WEBSITE/assets/Generic-G50-CC-Typic.ttf") format("truetype"),
        url("/CPD-WEBSITE/assets/Generic-G50-CC-Typic.woff") format("woff");
} USE WHEN PUSHING TO GITHUB */

@font-face {
    font-family: Generic;
    src: url("/assets/Generic-G50-CC-Typic.ttf");
    src: url("/assets/Generic-G50-CC-Typic.woff") format("woff");
}

@font-face {
    font-family: Octuple;
    src: url("/assets/Octuple-max-demo.ttf");
}


body {
    font-family: Generic, sans-serif;
    font-size: 16px;
    font-weight: 400;
    line-height: 1.45;
    background: black;
}

p {
    font-family: Generic;
    font-weight: 400;
    font-size: 15px;
}

h1,
h2 {
    font-family: Generic, serif;
}

h1 {
    font-size: 5.8rem;
    line-height: 1;
    color: rgba(255, 0, 0, 0.85);
    filter: drop-shadow(0rem 0rem 0.96rem #ff0000);
    text-decoration: none;
}

.swashStyle {
    font-feature-settings: "swsh";
}

h2 {
    font-size: 32px;
    font-style: italic;
    font-weight: 700;
    line-height: normal;
    letter-spacing: 0em;
    text-align: left;
}

h3 {
    font-family: Octuple;
    font-size: 18px;
    font-weight: normal;
    line-height: auto;
}

h4 {
    font-family: Quasimoda;
    font-size: 11px;
    line-height: auto;
    letter-spacing: 0.875px;
    font-weight: 400;
    text-transform: uppercase;
    padding: 0px;
}

/* GRID.CSS */
.container {
    width: auto;
    margin: auto;
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    grid-column-gap: 20px;
    grid-row-gap: 1em;
    grid-row: auto;
}

.containerNoGap {
    width: auto;
    margin: auto;
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    grid-column-gap: 0px;
    grid-row-gap: 1em;
    grid-row: auto;
}

.innerContainer {
    width: 100%;
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    grid-column-gap: 20px;
    grid-row-gap: 1em;
    grid-row: auto;
}

.containerFullFlex {
    padding-top: 40px;
    padding-bottom: 40px;
    width: 100%;
    margin: auto;
    display: flex;
    justify-content: space-between;
}

.containerFull {
    width: 100%;
    margin: auto;
}

.containerNoPadding {
    width: 1200px;
    margin: auto;
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    grid-column-gap: 2em;
    grid-row-gap: 1em;
    grid-row: auto;
}

.nestedHalf {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-column-gap: 1.5em;
    grid-row-gap: 1em;
}

.nestedQuarter {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-column-gap: 1.5em;
    grid-row-gap: 1em;
}

.width-1 {
    grid-column: span 1;
}

.width-2 {
    grid-column: span 2;
}

.width-3 {
    grid-column: span 3;
}

.width-4 {
    grid-column: span 4;
}

.width-5 {
    grid-column: span 5;
}

.width-6 {
    grid-column: span 6;
}

.width-7 {
    grid-column: span 7;
}

.width-8 {
    grid-column: span 8;
}

.width-9 {
    grid-column: span 9;
}

.width-10 {
    grid-column: span 10;
}

.width-11 {
    grid-column: span 11;
}

.width-12 {
    grid-column: span 12;
}

/* HEADER.CSS */

.main-header {
    z-index: 2000;
}

.main-header .cpd-logo {
    z-index: 5000;
    padding: 30px 20px 0px 200px;
    /* border: 3px solid red; */
    /* padding: 20px 30px 0px; */
    animation: redAni 5s infinite;
}

@keyframes blueAni {

    0%,
    100% {
        filter: sepia(100) invert(100%) saturate(50) drop-shadow(0rem 0rem 0rem #63d2f4) blur(0px);
    }

    50% {
        filter: sepia(100) invert(100%) saturate(100) drop-shadow(0rem 0rem 1rem #63d2f4);
    }
}

@keyframes redAni {

    0%,
    100% {
        filter: sepia(100) invert(0%) saturate(10) drop-shadow(0rem 0rem 0rem #ff0000) blur(0px);
    }

    50% {
        filter: sepia(100) invert(0%) saturate(40) drop-shadow(0rem 0rem 1rem #ff0000);
    }
}

@keyframes fadeOut {
    from {
        opacity: 1;
    }

    to {
        opacity: 0;
    }
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}

html,
body {
    /* overflow: hidden; */
}

/* LANDING.CSS */
.mike-cutout {
    position: absolute;
    width: auto;
    height: 60vh;
    min-height: 300px;
    /* border: 3px solid blue; */
    bottom: 0;
    right: -6%;
}

.lauryn-cutout {
    border-radius: 36rem;
    border-width: 3px;
    border-color: black;
    border-style: solid;
    border-top-left-radius: 0.3rem;
    border-bottom-left-radius: 22.4rem;
    border-bottom-right-radius: 90.6rem;
    border-top-right-radius: 0.1rem;
    /* width: 60vh;
    margin-top: -20vh;
    margin-left: -4vw; */
    z-index: -1;
    position: absolute;
    width: auto;
    height: 55vh;
    top: -2vh;
    left: 49.5vw;
}

.work-cutout {
    position: absolute;
    width: auto;
    height: 11vh;
    rotate: -1deg;
    /* min-height: 90px;
    max-height: 11.5vh; */
    /* border: 3px solid red; */
    bottom: 17.5vh;
    left: 50.5vw;
    margin-bottom: 15vh;
}

.about-cutout {
    cursor: pointer;
    position: absolute;
    width: auto;
    height: 10vh;
    /* min-height: 90px;
    max-height: 11.5vh; */
    /* border: 3px solid teal; */
    bottom: 17.5vh;
    left: 50.5vw;
}

.instagram-cutout {
    /* border: 3px solid greenyellow; */
    cursor: pointer;
    position: absolute;
    width: auto;
    height: 10vh;
    /* min-height: 90px;
    max-height: 11.5vh; */
    /* border: 3px solid teal; */
    bottom: 4vh;
    left: 52.5vw;
}

.nova-cutout {
    /* border: 3px solid greenyellow; */
    cursor: pointer;
    position: absolute;
    width: auto;
    height: 10vh;
    /* min-height: 90px;
    max-height: 11.5vh; */
    /* border: 3px solid teal; */
    bottom: 4vh;
    left: 61.25vw;
}

.vsco-cutout {
    /* border: 3px solid greenyellow; */
    cursor: pointer;
    position: absolute;
    width: auto;
    height: 10vh;
    border-radius: 100%;
    /* min-height: 90px;
    max-height: 11.5vh; */
    /* border: 3px solid teal; */
    bottom: 4vh;
    left: 70vw;
}

.work, .about, .instagram, .nova, .vsco {
    cursor: pointer;
}

.work:hover , .about:hover, .instagram:hover, .nova:hover, .vsco:hover {
    filter: sepia(100) invert(100%) saturate(100) blur(0px) drop-shadow(0rem 0rem 0.25rem #ffffff);
}

 .content {
    /* border: 3px solid greenyellow; */
}

.liveTime {
    font-family: monospace;
    position: absolute;
    padding-right: 25px;
    top: 14vh;
    right: 0;
}

@import url('https://unpkg.com/normalize.css') layer(normalize);

@layer normalize, base, demo;

@layer demo {
  :root {
    --color: light-dark(red, red);
    --shadow: light-dark(blue,blue);
    --glare: light-dark(white, hsl(0 0% 100% / 0.75));
    --transition: 0.5s;
  }

  .dazzle {
    --font-level: 5;
    --font-size: 1em;
    --padding: 0.12em;
    padding: var(--padding) calc(var(--padding) * 2);
    border-radius: 0.25em;
    text-decoration: none;
    color: transparent;
    position: relative;
    transition: background 0.2s 0.1s;
    font-weight: 600;
  }

  .dazzle span {
    display: inline-block;
    transition: all 0.2s;
    text-decoration: none;
    text-shadow: calc(var(--hover) * (var(--font-size) * -0))
        calc(var(--hover) * (var(--font-size) * 0)) var(--shadow),
      calc(var(--hover) * (var(--font-size) * -0.02))
        calc(var(--hover) * (var(--font-size) * 0.02)) var(--shadow),
      calc(var(--hover) * (var(--font-size) * -0.04))
        calc(var(--hover) * (var(--font-size) * 0.04)) var(--shadow),
      calc(var(--hover) * (var(--font-size) * -0.06))
        calc(var(--hover) * (var(--font-size) * 0.06)) var(--shadow),
      calc(var(--hover) * (var(--font-size) * -0.08))
        calc(var(--hover) * (var(--font-size) * 0.08)) var(--shadow),
      calc(var(--hover) * (var(--font-size) * -0.1))
        calc(var(--hover) * (var(--font-size) * 0.1)) var(--shadow);
    transform: translate(
      calc(var(--hover) * (var(--font-size) * 0.1)),
      calc(var(--hover) * (var(--font-size) * -0.1))
    );
  }

  .dazzle span:last-of-type {
    position: absolute;
    inset: var(--padding) calc(var(--padding) * 2);
    background: linear-gradient(
          108deg,
          transparent 0 55%,
          var(--glare) 55% 60%,
          transparent 60% 70%,
          var(--glare) 70% 85%,
          transparent 85%
        )
        calc(var(--pos) * -200%) 0% / 200% 100%,
      var(--color);
    -webkit-background-clip: text;
    color: transparent;
    z-index: 2;
    text-shadow: none;
    transform: translate(
      calc(var(--hover) * (var(--font-size) * 0.1)),
      calc(var(--hover) * (var(--font-size) * -0.1))
    );
  }

  .dazzle span:last-of-type {
    transition: transform 0.2s, background-position 0s;
  }

  .dazzle:is(:hover, :focus-visible) span:last-of-type {
    transition: transform 0.2s,
      background-position calc(var(--hover) * 1.5s) calc(var(--hover) * 0.25s);
  }

  .dazzle {
    --hover: 0.4;
    --pos: 0;
  }

  .dazzle:is(:hover, :focus-visible) {
    --hover: 1;
    --pos: 1;
  }

  .dazzle:active {
    --hover: 0;
  }

  .dazzle:active span:last-of-type {
    --hover: 0;
    --pos: 1;
  }

  .dazzle svg {
    position: absolute;
    z-index: 3;
    width: calc(var(--font-size) * 0.5);
    aspect-ratio: 1;
  }

  .dazzle svg path {
    fill: var(--glare);
  }

  /* Animation for sparkles */

  .dazzle:focus-visible {
    outline: none;
  }

  .dazzle:is(:hover, :focus-visible) svg {
    animation: sparkle 0.75s calc(0.1s + ((var(--delay-step) * var(--d)) * 1s))
      both;
  }

  @keyframes sparkle {
    50% {
      transform: translate(-50%, -50%) scale(var(--s, 1));
    }
  }

  .dazzle svg {
    --delay-step: 0.15;
    top: calc(var(--y, 50) * 1%);
    left: calc(var(--x, 0) * 1%);
    transform: translate(-50%, -50%) scale(0);
    stroke-width: 1;
    stroke: light-dark(black, #0000);
  }

  .dazzle svg:nth-of-type(1) {
    --x: 0;
    --y: 20;
    --s: 1.1;
    --d: 1;
  }

  .dazzle svg:nth-of-type(2) {
    --x: 15;
    --y: 80;
    --s: 1.25;
    --d: 2;
  }

  .dazzle svg:nth-of-type(3) {
    --x: 45;
    --y: 40;
    --s: 1.1;
    --d: 3;
  }

  .dazzle svg:nth-of-type(4) {
    --x: 75;
    --y: 60;
    --s: 0.9;
    --d: 2;
  }

  .dazzle svg:nth-of-type(5) {
    --x: 100;
    --y: 30;
    --s: 0.8;
    --d: 4;
  }
}

@layer base {
  :root {
    --font-size-min: 16;
    --font-size-max: 20;
    --font-ratio-min: 1.2;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }

  html {
    color-scheme: light dark;
  }

  [data-theme='light'] {
    color-scheme: light only;
  }

  [data-theme='dark'] {
    color-scheme: dark only;
  }

  :where(.fluid) {
    --fluid-min: calc(
      var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0))
    );
    --fluid-max: calc(
      var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0))
    );
    --fluid-preferred: calc(
      (var(--fluid-max) - var(--fluid-min)) /
        (var(--font-width-max) - var(--font-width-min))
    );
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
        (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
        (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }
  
  body {
    min-height: 100vh;
  }
  
}
